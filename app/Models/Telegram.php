<?php

namespace App\Models;

use Illuminate\Support\Facades\Http;
use App\Http\Controllers\ProductControl;

class Telegram 
{

    public static function layout($num, $product, $link, $type = '')
    {
        switch ($type) {
            case 'ticket':
                return self::ticket($num, $product, $link);
                break;
            case 'neworder':
                return self::neworder($num, $product, $link);
                break;
            case 'spares':
                return self::spares($num, $product, $link);
                break;
            case 'checkout':
                return self::checkout($num, $product, $link);
                break;
            case 'precheckout':
                return self::precheckout($num, $product, $link);
                break;
            case 'manager':
                return self::manager($num, $product, $link);
                break;
            case 'counterparty':
                return self::counterparty($num, $product, $link);
                break;
            case 'neworderDB':
                return self::neworderDB($num, $product, $link);
                break;
            case 'neworderDBreg':
                return self::neworderDBreg($num, $product, $link);
                break;
             case 'quickorder':
                return self::quickOrder($num, $product, $link);
                break;
            default:
                return self::product($num, $product, $link);
        }
    }

    public static function neworder($num, $product, $link)
    {
        $msd = '<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ ‚Ññ'.$product.'</b>'.PHP_EOL.
        '------'.PHP_EOL.
        '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: '.$link['name'].PHP_EOL.
        'E-mail: '.$link['email'].PHP_EOL.
        '–¢–µ–ª–µ—Ñ–æ–Ω: '.$link['phone'].PHP_EOL.
        '------'.PHP_EOL.
        '<a href="https://prospekt-parts.com/dashboard/payment/reports/'.$num.'">[–ü–æ–¥—Ä–æ–±–Ω–µ–µ]</a>';
        //'<a href="https://api.moysklad.ru/app/#Company/edit?id='.$num.'">[–ü–æ–¥—Ä–æ–±–Ω–µ–µ]</a>';
        return $msd;
    }

    public static function counterparty($num, $product, $link)
    {
        $msd = '<b>–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∞—Å—å –Ω–æ–≤–∞—è –∫–æ–º–ø–∞–Ω–∏—è</b>'.PHP_EOL.
        '<i>'.$product.'</i>'.PHP_EOL.
        'E-mail –∞–¥—Ä–µ—Å: '.$link.PHP_EOL.
        '------'.PHP_EOL.
        '<a href="https://api.moysklad.ru/app/#Company/edit?id='.$num.'">[–ü–æ–¥—Ä–æ–±–Ω–µ–µ]</a>';
        return $msd;
    }

    public static function manager($num, $product, $link)
    {
        $msd = '<b>–í–æ–ø—Ä–æ—Å –º–µ–Ω–µ–¥–∂–µ—Ä—É #'.time().
        ' <a href="https://api.moysklad.ru/app/#customerorder/edit?id='.$num.'">–ø–æ –∑–∞–∫–∞–∑—É</a></b>'.PHP_EOL.
        '------'.PHP_EOL.
        PHP_EOL.$product.PHP_EOL.
        '<a href="https://api.moysklad.ru/app/#Company/edit?id='.$link.'">[–ü–æ–¥—Ä–æ–±–Ω–µ–µ]</a>';
        return $msd;
    }

    public static function precheckout($num, $product, $link)
    {
        $msd = '<b>–ü—Ä–µ–¥–∞–∫–∞–∑ #'.$product.'</b>'.PHP_EOL.
        '------'.PHP_EOL.
        '–î–∞—Ç–∞: '.date('d.m.Y | H:i').PHP_EOL.
        '==========.'.PHP_EOL.
        '<a href="https://api.moysklad.ru/app/#internalorder/edit?id='.$num.'">[–ü–æ–¥—Ä–æ–±–Ω–µ–µ]</a>';
        return $msd;
    }

    public static function checkout($num, $product, $link)
    {   
        $msd = '<b>–ó–∞–∫–∞–∑ #'.$product.'</b>'.PHP_EOL.
        '------'.PHP_EOL.
        '–î–∞—Ç–∞: '.date('d.m.Y | H:i').PHP_EOL.
        '–ù–∞ –≤–∞—à–µ–º —Å–µ—Ä–≤–∏—Å–µ '.config('app.name').' –±—ã–ª –æ—Ñ–æ—Ä–º–ª–µ–Ω –∑–∞–∫–∞–∑ —Ç–æ–≤–∞—Ä–æ–≤.'.PHP_EOL.
        '<a href="https://api.moysklad.ru/app/#customerorder/edit?id='.$num.'">[–ü–æ–¥—Ä–æ–±–Ω–µ–µ]</a>';
        return $msd;
    }
    
    public static function spares($num, $product, $link)
    {
        $msd = '<b>–ó–∞–∫–∞–∑ #'.time().'</b>'.PHP_EOL.
        '------'.PHP_EOL.
        '<b>VIN –Ω–æ–º–µ—Ä:</b> '.$link.PHP_EOL.PHP_EOL.
        '<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>'.PHP_EOL.$product.PHP_EOL.
        '<a href="https://api.moysklad.ru/app/#Company/edit?id='.$num.'">[–ü–æ–¥—Ä–æ–±–Ω–µ–µ]</a>';
        return $msd;
    }

    public static function ticket($num, $product, $link)
    {
        $msd = '<b>–¢–∏–∫–µ—Ç #'.$num.'</b>'.PHP_EOL.
        '<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>'.PHP_EOL.$product.PHP_EOL.
        '<a href="https://prospekt-parts.com/dashboard/product/details/'.$link.'">[–ü–æ–¥—Ä–æ–±–Ω–µ–µ]</a>';
        return $msd;
    }

    public static function product($num, $product, $link)
    {
        $msd = '<b>–ó–∞–ø—Ä–æ—Å #'.$num.'</b>'.PHP_EOL.
        '<b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>'.PHP_EOL.$product.PHP_EOL.
        '<a href="https://api.moysklad.ru/app/#Contract/edit?id='.$link.'">[–ü–æ–¥—Ä–æ–±–Ω–µ–µ]</a>';
        return $msd;
    }

    /*public static function neworderDB($num, $product, $link)
    {
        $positions = self::getOrderPosition($product);

        $msd = '<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>'.PHP_EOL.
            '------'.PHP_EOL.
            '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: '.$link['name'].PHP_EOL.
            'E-mail: '.$link['email'].PHP_EOL.
            '–¢–µ–ª–µ—Ñ–æ–Ω: '.$link['phone'].PHP_EOL.
            '–ê–¥—Ä–µ—Å: '.$link['address'].PHP_EOL.
            '------'.PHP_EOL.
            '–ü–æ–∑–∏—Ü–∏–∏: '.PHP_EOL.
            '------'.PHP_EOL.
            $positions['items'].
            '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: '.($positions['total'] / 100).'‚ÇΩ'.PHP_EOL;
            //'<a href="https://prospekt-parts.com/dashboard/payment/reports/'.$num.'">[–ü–æ–¥—Ä–æ–±–Ω–µ–µ]</a>';
        //'<a href="https://api.moysklad.ru/app/#Company/edit?id='.$num.'">[–ü–æ–¥—Ä–æ–±–Ω–µ–µ]</a>';
        return $msd;
    }*/
    
    public static function neworderDB($num, $product, $link)
    {
        $positions = self::getOrderPosition($product);
    
        $msd = 'üÜï <b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑</b>'.PHP_EOL.
            '------'.PHP_EOL.
            'üë§ <b>–ü–æ–∫—É–ø–∞—Ç–µ–ª—å:</b> '.htmlspecialchars($link['name']).PHP_EOL.
            '‚úâÔ∏è <b>E-mail:</b> '.htmlspecialchars($link['email']).PHP_EOL.
            'üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> '.htmlspecialchars($link['phone']).PHP_EOL.
            'üìç <b>–ê–¥—Ä–µ—Å:</b> '.htmlspecialchars($link['address']).PHP_EOL.
            '------'.PHP_EOL.
            'üõçÔ∏è <b>–ü–æ–∑–∏—Ü–∏–∏:</b>'.PHP_EOL.
            '------'.PHP_EOL.
            $positions['items'].
            'üí∞ <b>–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞:</b> '.number_format($positions['total'] / 100, 2, '.', '').'‚ÇΩ'.PHP_EOL;
        return $msd;
    }

    
    
    public static function quickOrder($num, $product, $link)
    {
        $positions = self::getOrderPosition($product);

        $msd = '<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –æ–¥–∏–Ω –∫–ª–∏–∫</b>'.PHP_EOL.
            '------'.PHP_EOL.
            '–ü–æ–∫—É–ø–∞—Ç–µ–ª—å: '.$link['name'].PHP_EOL.
            '–¢–µ–ª–µ—Ñ–æ–Ω: '.$link['phone'].PHP_EOL.
            '------'.PHP_EOL.
            '–ü–æ–∑–∏—Ü–∏–∏: '.PHP_EOL.
            '------'.PHP_EOL.
            $positions['items'].
            '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: '.($positions['total'] / 100).'‚ÇΩ'.PHP_EOL;

        return $msd;
    }
    

    public static function neworderDBreg($num, $product, $link)
    {
        $counterAgent = MoySklad::getContrAgentLink($link['name']);
        
        $categoriesResult = Database::getCategotiesArray();
        
        $positions = self::getOrderPosition($product);

        $msd = '<b>–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>'.PHP_EOL.
            '------'.PHP_EOL.
            '<a href="' . $counterAgent . '"><u>–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è</u></a>' .PHP_EOL.
            '------'.PHP_EOL.
            '–ü–æ–∑–∏—Ü–∏–∏: '.PHP_EOL.
            '------'.PHP_EOL.
            //test
            '–°–∫–ª–∞–¥: '.$categoriesResult[$item['category_id']].PHP_EOL.
            '------'.PHP_EOL.
            
            $positions['items'].
            '–°—É–º–º–∞ –∑–∞–∫–∞–∑–∞: '.($positions['total'] / 100).'‚ÇΩ'.PHP_EOL;
        //'<a href="https://prospekt-parts.com/dashboard/payment/reports/'.$num.'">[–ü–æ–¥—Ä–æ–±–Ω–µ–µ]</a>';
        //'<a href="https://api.moysklad.ru/app/#Company/edit?id='.$num.'">[–ü–æ–¥—Ä–æ–±–Ω–µ–µ]</a>';
        return $msd;
    }

      /*public static function getOrderPosition($product)
        {
            $categoriesResult = Database::getCategotiesArray();
        
            $items = '';
            $total = 0;
            foreach ($product as $item){
                $items .= '–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ: ' . $item['name'] . ' ' . $item['article'] . PHP_EOL .
                          '–¶–µ–Ω–∞: ' . ($item['price'] / 100) . PHP_EOL .
                          '–ö–æ–ª-–≤–æ: ' . $item['quantity'] . PHP_EOL .
                          '------' . PHP_EOL; // –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É —Ç–æ–≤–∞—Ä–∞–º–∏ (–µ—Å–ª–∏ —Ç—Ä–µ–±—É–µ—Ç—Å—è)
                $total += ($item['price']) * $item['quantity']; // –†–∞—Å—á–µ—Ç —Å—É–º–º—ã –ø–æ –ø–æ–∑–∏—Ü–∏–∏
            }
            return ['items' => $items, 'total' => $total];
        }*/ 

        public static function getOrderPosition($product)
        {
            $items = '';
            $total = 0;
            foreach ($product as $item){
                $price = $item['price'];
                $quantity = $item['quantity'];
                $sum = $price * $quantity;
                $items .= 'üì¶ <b>–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ:</b> '.htmlspecialchars($item['name'].' '.$item['article']).PHP_EOL.
                          'üí≤ <b>–¶–µ–Ω–∞:</b> '.number_format($price / 100, 2, '.', '').'‚ÇΩ'.PHP_EOL.
                          'üî¢ <b>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ:</b> '.$quantity.PHP_EOL.
                          'üßÆ <b>–°—É–º–º–∞:</b> '.number_format($sum / 100, 2, '.', '').'‚ÇΩ'.PHP_EOL.
                          '------'.PHP_EOL;
                $total += $sum;
            }
            return ['items' => $items, 'total' => $total];
        }


    public static function getMessageTelegram($num, $product, $link, $type = '')
    {
        $msd = self::layout($num, $product, $link, $type);
        $url = config('app.tg_url').config('app.tg_apikey').'/sendMessage';
        $response = Http::asForm()->post($url, [
            'text' => htmlspecialchars_decode($msd),
            'chat_id' => -1002004240593,    
            'parse_mode' => 'HTML'
            
        ]);
        //return $response;
        // –ó–∞–ø–∏—Å–∞—Ç—å –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    \Log::info('–û—Ç–≤–µ—Ç –æ—Ç Telegram API: ' . $response);
    return $response;
    }

}